<?php

declare(strict_types=1);

namespace Psl\TCP\TLS;

use Psl\Default\DefaultInterface;

/**
 * Defines the hashing algorithms supported for generating and verifying TLS certificate fingerprints.
 *
 * This enum facilitates the use of strictly typed hashing algorithms throughout the TLS configuration,
 * ensuring that only supported and correctly implemented algorithms are utilized.
 */
enum HashingAlgorithm: string implements DefaultInterface
{
    /**
     * Represents the SHA-1 hashing algorithm.
     *
     * SHA-1 produces a 40-character hexadecimal fingerprint. It's less secure than SHA-256 due to vulnerabilities
     * that allow for collision attacks, and its use is generally discouraged in favor of stronger algorithms.
     */
    case Sha1 = 'sha1';

    /**
     * Represents the SHA-256 hashing algorithm.
     *
     * SHA-256 is a member of the SHA-2 cryptographic hash functions designed by the NSA, producing a 64-character
     * hexadecimal fingerprint. It's more secure than SHA-1 and recommended for modern security requirements.
     */
    case Sha256 = 'sha256';

    /**
     * Provides the default hashing algorithm used for TLS certificate fingerprints.
     *
     * The default is set to SHA-256 due to its enhanced security over SHA-1, making it the
     * recommended choice for modern security requirements. This method offers a straightforward
     * way to access the preferred default hashing algorithm when configuring TLS options.
     *
     * @pure
     */
    public static function default(): static
    {
        return static::Sha256;
    }

    /**
     * Retrieves the expected length of the fingerprint generated by the hashing algorithm.
     *
     * @mutation-free
     */
    public function getExpectedLength(): int
    {
        return match ($this) {
            self::Sha1 => 40,
            self::Sha256 => 64,
        };
    }
}
